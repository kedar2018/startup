<!-- app/views/layouts/active_admin.html.erb -->
<!DOCTYPE html>
<html>
<head>
  <%= active_admin_head %>
  <!-- CKEditor 5 Classic build -->
  <script src="https://cdn.ckeditor.com/ckeditor5/41.4.2/classic/ckeditor.js"></script>
</head>
<body class="<%= body_classes %>">
  <%= yield %>

  <script>
    // -- CKEditor <-> Rails CSRF helper
    function csrfToken() {
      var tag = document.querySelector('meta[name="csrf-token"]');
      return tag && tag.content;
    }

    // -- Upload adapter: posts image/file to /admin/uploads -> returns {url: "..."}
    class ActiveStorageUploadAdapter {
      constructor(loader) { this.loader = loader; }
      async upload() {
        const file = await this.loader.file;
        const data = new FormData();
        data.append("upload", file);

        const res = await fetch("/admin/uploads", {
          method: "POST",
          headers: { "X-CSRF-Token": csrfToken() },
          body: data,
          credentials: "same-origin"
        });

        if (!res.ok) throw new Error("Upload failed");
        const json = await res.json();
        return { default: json.url }; // CKEditor expects { default: URL }
      }
      abort() {} // optional
    }

    function MyUploadAdapterPlugin(editor) {
      editor.plugins.get('FileRepository').createUploadAdapter = (loader) =>
        new ActiveStorageUploadAdapter(loader);
    }

    // -- Initialize editors on all <textarea class="js-ck">
    function initCkEditors(root = document) {
      root.querySelectorAll('textarea.js-ck:not([data-cked])').forEach(function(el) {
        ClassicEditor.create(el, {
          extraPlugins: [ MyUploadAdapterPlugin ],
          toolbar: [
            'heading','|','bold','italic','underline','link','bulletedList','numberedList',
            'blockQuote','codeBlock','insertTable','imageUpload','undo','redo','alignment'
          ],
          heading: {
            options: [
              { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
              { model: 'heading1', view: 'h1', title: 'H1', class: 'ck-heading_heading1' },
              { model: 'heading2', view: 'h2', title: 'H2', class: 'ck-heading_heading2' },
              { model: 'heading3', view: 'h3', title: 'H3', class: 'ck-heading_heading3' }
            ]
          },
          image: { toolbar: ['imageStyle:inline','imageStyle:block','imageStyle:side','|','imageTextAlternative'] },
          link:   { decorators: { addTargetToExternalLinks: true } }
        }).then(() => { el.setAttribute('data-cked','1'); })
          .catch((e) => console.error("CKEditor init error:", e));
      });
    }

    // Initial + future nodes (handles AAâ€™s PJAX, nested forms, etc.)
    document.addEventListener('DOMContentLoaded', () => {
      initCkEditors();

      // Observe dynamic additions (has_many, PJAX, etc.)
      const mo = new MutationObserver((muts) => {
        muts.forEach(m => m.addedNodes.forEach(n => {
          if (n.querySelectorAll) initCkEditors(n);
          if (n.tagName === 'TEXTAREA' && n.classList.contains('js-ck')) initCkEditors(document);
        }));
      });
      mo.observe(document.body, { childList: true, subtree: true });
    });
  </script>
</body>
</html>
